enum PostCommentsFields {
  CREATED_AT @enum(value: "created_at")
}

enum PostsOrderColumn {
  CREATED_AT @enum(value: "created_at")
}

type Image {
  "The url of the image from a post"
  url: URI! @field(resolver: "App\\GraphQL\\Types\\Post@imageUrl")
}

type Post implements Likeable @model(class: "App\\Domain\\Posts\\Models\\Post") {
  "A list of comments associated with the post."
  comments(
    orderBy: _ @orderBy(columnsEnum: "PostCommentsFields")
  ): [Comment!]! @hasMany(type: "connection", scopes: ["noRoot"])
  "Post Root Comment"
  rootComment: Comment @field(resolver: "App\\GraphQL\\Types\\Post@rootComment")
  "The post's description."
  description: String
  "Globally unique identifier."
  id: ID! @globalId
  "Created at post"
  createdAt: DateTime! @rename(attribute: "created_at")
  ""
  images: [Image!]! @morphMany(relation: "media")
  "A list of likes associated with the post."
  likes: [Like!]! @morphMany(type: "connection")
  "User that created the post."
  user: User! @belongsTo
  "Returns a boolean indicating whether the viewing user has saved this post."
  viewerHasBookmarked: Boolean! @with(relation: "users") @field(resolver: "App\\GraphQL\\Types\\Post@viewerHasBookmarked")
  "Returns a boolean indicating whether the viewing user has liked this post."
  viewerHasLiked: Boolean! @with(relation: "likes") @field(resolver: "App\\GraphQL\\Types\\Post@viewerHasLiked")
}

# Queries

extend type Query @guard {
  "Get a post from a given id."
  post(id: ID! @globalId(decode: "ID") @eq): Post @find

  "Get all posts sort by enum column"
  posts(orderBy: _ @orderBy(columnsEnum: "PostsOrderColumn")): [Post!]!
    @paginate(type: "connection")
}

# Inputs

input CreateBookmarkInput @validator {
  "The post id for save has a bookmark."
  postId: ID! @globalId(decode: "ID")
}

input RemoveBookmarkInput @validator {
  postId: ID! @globalId(decode: "ID")
}

input CreatePostInput {
  "All photos for create a new post."
  photos: [Upload!]!
  "Text comment for the new post."
  text: String!
}

# Payloads

type CreateBookmarkPayload {
  post: Post
}

type RemoveBookmarkPayload {
  post: Post
}

type CreatePostPayload {
  post: Post!
}

# Mutations

extend type Mutation @guard @namespace(field: "App\\GraphQL\\Mutations\\Posts") {
  createBookmark(input: CreateBookmarkInput! @spread): CreateBookmarkPayload
    @field(resolver: "CreateBookmark")

  removeBookmark(input: RemoveBookmarkInput! @spread): RemoveBookmarkPayload
    @field(resolver: "RemoveBookmark")

  createPost(input: CreatePostInput!): CreatePostPayload
    @field(resolver: "CreatePost")
}

# Subscriptions

extend type Subscription @namespace(field: "App\\GraphQL\\Subscriptions\\Posts") {
  postUpdated: Post @subscription(class: "App\\GraphQL\\Subscriptions\\Posts\\PostUpdated")
}
